# PhosphorylationFit_MakeBNGL.py
#
# Bryan Daniels
# 06.14.2009
#
# Python code that generates a BNGL file (BioNetGen input file)
# for the PhosphorylationFit problem.
#

import os

def strCombine(listOfStrings):
    string = ''
    for s in listOfStrings:
        string += s
    return string

def excludeStr(centerSite,reactionOrder,interactionList):
    """
    Given a reaction's 'center site' (the site modified by the
    reaction), its 'order' (number of involved sites), and a list 
    of all interactions,
    creates an exclude_reaction modifier that turns off the
    reaction when it would match with a higher-order pattern.
    
    For now assumes that an 'interaction' consists of a list of sites that
    must be phosphorylated in order to affect the rates of the last
    site in the list.
    """
    string = " exclude_reactants(1,"
    somethingExcluded = False
    for interaction in interactionList:
        #print "centerSite: ", centerSite
        #print "interaction[-1]: ", interaction[-1]
        #print "reactionOrder: ", reactionOrder
        #print "len(interaction): ", len(interaction)
        #print ""
        if   (centerSite == interaction[-1])                                    \
         and (reactionOrder < len(interaction)):
            string += "P("                                                      \
            +strCombine(["s"+str(site)+"~P," for site in interaction[:-1]])[:-1]\
            +"),"
            somethingExcluded = True
    if somethingExcluded:
        return string[:-1]+")"
    else:
        return ""

def writeBNGLnetwork(n,interactionList,filename,returnNames=True,               \
    MichaelisMenten=True):
    """
    Generates a BNGL file (BioNetGen input file)
    for the PhosphorylationFit problem.
    
    n               : number of phosphorylation sites
    interactionList : list of tuples
    filename        : name for bngl output file
                      ('.bngl' is automatically appended to the filename.)
    returnNames     : if True, returns a list of the parameter names
    MichaelisMenten : if True, each reaction rate varies with the concentration
                      of the substrate according to a simple Michaelis-Menten law.
                      
    Warning: Using n>10 will likely cause problems with naming.
    For now assumes that an 'interaction' consists of a list of sites that
        must be phosphorylated in order to affect the rates of the last
        site in the list, and only the off-rate is affected.
    """
    
    kpDefault = 1.
    kuDefault = 1.
    KmpDefault = 1.
    KmuDefault = 1.
    initConcentration = 1.
    namesList = []
    
    filename += '.bngl'
    fout = open(filename,"w")
    writeLine = lambda string: fout.write(string+'\n')
    
    writeLine("# "+filename)
    writeLine("# ")
    writeLine("# BNGL file automatically generated by")
    writeLine("# writeBNGLnetwork in PhosphorylationFit_MakeBNGL.py")
    writeLine("# ")
    writeLine("  ")
    
    writeLine("begin parameters")
    writeLine("  ")
    writeLine("# independent phosphorylation rates")
    for i in range(1,n+1):
        writeLine("k"+str(i)+"p     "+str(kpDefault))
        namesList.append("k"+str(i)+"p")
        writeLine("k"+str(i)+"u     "+str(kuDefault))
        namesList.append("k"+str(i)+"u")
    if MichaelisMenten:
      for i in range(1,n+1):
        writeLine("Km"+str(i)+"p     "+str(KmpDefault))
        namesList.append("Km"+str(i)+"p")
        writeLine("Km"+str(i)+"u     "+str(KmuDefault))
        namesList.append("Km"+str(i)+"u")
    writeLine("  ")
    
    writeLine("# additional interactions")
    for interaction in interactionList:
      writeLine("k"+strCombine([str(site) for site in interaction])             \
               +"p        "+str(kpDefault))
      namesList.append("k"+strCombine([str(site) for site in interaction])+"p")
      writeLine("k"+strCombine([str(site) for site in interaction])             \
               +"u        "+str(kpDefault))
      namesList.append("k"+strCombine([str(site) for site in interaction])+"u")
      if MichaelisMenten:
        writeLine("Km"+strCombine([str(site) for site in interaction])          \
                 +"p        "+str(KmpDefault))
        namesList.append("Km"+strCombine([str(site) for site in interaction])+"p")
        writeLine("Km"+strCombine([str(site) for site in interaction])          \
                 +"u        "+str(KmpDefault))
        namesList.append("Km"+strCombine([str(site) for site in interaction])+"u")
    writeLine("  ")
    
    writeLine("end parameters")
    writeLine("  ")
    writeLine("  ")
    
    writeLine("begin species")
    writeLine("P("+strCombine( ["s"+str(i)+"~U," for i in range(1,n+1)] )[:-1]  \
             +")        "+str(initConcentration))
    writeLine("end species")
    writeLine("  ")
    writeLine("  ")
    
    writeLine("begin reaction rules")
    writeLine("  ")
    
    writeLine("# independent phosphorylation rates")
    for i in range(1,n+1):
      if MichaelisMenten:
        writeLine("P(s"+str(i)+"~U) "                                           \
                 +"<-> P(s"+str(i)+"~P) Sat(k"+str(i)+"p,Km"+str(i)+"p),"       \
                 +"Sat(k"+str(i)+"u,Km"+str(i)+"u)"                             \
                 +excludeStr(i,1,interactionList))
      else:
        writeLine("P(s"+str(i)+"~U) "                                           \
                 +"<-> P(s"+str(i)+"~P) k"+str(i)+"p,k"+str(i)+"u"              \
                 +excludeStr(i,1,interactionList))
    writeLine("  ")
    
    writeLine("# additional interaction rules")
    #For now assumes that an 'interaction' consists of a list of sites that
    #   must be phosphorylated in order to affect the rates of the last
    #   site in the list, and only the off-rate is affected.
    for interaction in interactionList:
      if MichaelisMenten:
        interactionName = strCombine([str(site) for site in interaction])
        writeLine("P("                                                          \
                 +strCombine(["s"+str(site)+"~P," for site in interaction[:-1]])\
                 +"s"+str(interaction[-1])+"~U) "                               \
                 +"<-> P("                                                      \
                 +strCombine(["s"+str(site)+"~P," for site in interaction[:-1]])\
                 +"s"+str(interaction[-1])+"~P) "                               \
                 +"Sat(k"+interactionName+"p,Km"+interactionName+"p),"          \
                 +"Sat(k"+interactionName+"u,Km"+interactionName+"u)"           \
                 +excludeStr(interaction[-1],len(interaction),interactionList))
      else:
        writeLine("P("                                                          \
                 +strCombine(["s"+str(site)+"~P," for site in interaction[:-1]])\
                 +"s"+str(interaction[-1])+"~U) "                               \
                 +"<-> P("                                                      \
                 +strCombine(["s"+str(site)+"~P," for site in interaction[:-1]])\
                 +"s"+str(interaction[-1])+"~P) "                               \
                 +"k"+strCombine([str(site) for site in interaction])+"p,"      \
                 +"k"+strCombine([str(site) for site in interaction])+"u"       \
                 +excludeStr(interaction[-1],len(interaction),interactionList))
    writeLine("  ")
    writeLine("end reaction rules")
    writeLine("  ")
    writeLine("  ")
    
    writeLine("begin observables")
    #writeLine("Molecules   dummy       "                                       \
    #   +"P("+strCombine( ["s"+str(i)+"~U," for i in range(1,n+1)] )[:-1]+")")
    for i in range(1,n+1):
        writeLine("Molecules    P"+str(i)+"     P(s"+str(i)+"~P)")
    for i in range(1,n+1):
        for j in range(i+1,n+1):
            writeLine("Molecules    P"+str(i)+"_P"+str(j)+"     P(s"            \
                +str(i)+"~P,s"+str(j)+"~P)")
        
    writeLine("end observables")
    writeLine("  ")
    writeLine("  ")
    
    writeLine("generate_network({overwrite=>1});")
    writeLine("  ")
    
    #writeLine("writeSBML();")
    #writeLine("  ")
    
    # may not want the following line in the final product
    #writeLine('simulate_ode({suffix=>"equilibrate",t_end=>10,'                 \
    #        +'n_steps=>10,sparse=>1});') # ,steady_state=>1
    #writeLine("  ")
    
    fout.close()
    
    if returnNames:
        return namesList
    
    
def writeModifiedNet(filePrefix,namesList,paramsList,outputSuffix='_modified'):
    """
    Changes parameter values by directly modifying the original .net file.
    
    Assumes the original .net file has all the parameters set to 1.0
    
    (Doing it this way instead of the 'slow' way speeds things up by a 
     factor of about 3 for n=10 activation sites (1024 species). )
    """
    
    sedCommand = "sed "
    numParams = len(paramsList)
    
    # sed command changes any occurance (in lines 4 through 
    # 3+numParams) of 'parameterName 1.0' to 'parameterName newValue'
    for name,param in zip(namesList,paramsList):
        sedCommand += "-e '4,"+str(3+numParams)+" s/"+name+" 1.0/"              \
                      +name+" "+str(param)+"/' "
    
    sedCommand += filePrefix+".net > "+filePrefix+outputSuffix+".net"
    
    os.system(sedCommand)
    
def writeBNGLsimulate(filePrefix,endTime=10,nSteps=10):
    """
    Writes a BNGL file that directly simulates a given .net file.
    """
    
    outputFilePrefix = filePrefix + '_simulate'
    fout = open(outputFilePrefix+".bngl","w")
    writeLine = lambda string: fout.write(string+'\n')
    
    writeLine("# "+outputFilePrefix+".bngl")
    writeLine("# ")
    writeLine("# BNGL file automatically generated by")
    writeLine("# writeBNGLsimulate in PhosphorylationFit_MakeBNGL.py")
    writeLine("# ")
    writeLine("  ")
        
    writeLine('simulate_ode({netfile=>"'+filePrefix+'.net",prefix=>"'+filePrefix\
             +'",suffix=>"simulate",t_end=>'+str(endTime)+','                   \
             +'n_steps=>'+str(nSteps)+',sparse=>1});')
        
    fout.close()

    
def writeBNGLsimulateSlow(filePrefix,namesList,paramsList,endTime=10,nSteps=10):
    
    outputFilePrefix = filePrefix + '_simulate'
    fout = open(outputFilePrefix+".bngl","w")
    writeLine = lambda string: fout.write(string+'\n')
    
    writeLine("# "+outputFilePrefix+".bngl")
    writeLine("# ")
    writeLine("# BNGL file automatically generated by")
    writeLine("# writeBNGLsimulate in PhosphorylationFit_MakeBNGL.py")
    writeLine("# ")
    writeLine("  ")
    
    writeLine('readFile({prefix=>"'+filePrefix                                  \
             +'",file=>"'+filePrefix+'.net"});')
    writeLine("  ")
    
    for name,param in zip(namesList,paramsList):
        writeLine("setParameter("+name+","+str(param)+");")
    writeLine("  ")
        
    writeLine('simulate_ode({suffix=>"simulate",t_end=>'+str(endTime)+','       \
             +'n_steps=>'+str(nSteps)+',sparse=>1});')
        
    fout.close()
        

def writeBNGL_SBML(filePrefix,namesList,paramsList):
    
    outputFilePrefix = filePrefix[:-4]+"sbml"
    fout = open(outputFilePrefix+".bngl","w")
    writeLine = lambda string: fout.write(string+'\n')
    
    writeLine("# "+outputFilePrefix+".bngl")
    writeLine("# ")
    writeLine("# BNGL file automatically generated by")
    writeLine("# writeBNGL_SBML in PhosphorylationFit_MakeBNGL.py")
    writeLine("# ")
    writeLine("  ")
    
    writeLine('readFile({prefix=>"'+outputFilePrefix                            \
             +'",file=>"'+filePrefix+'.net"});')
    writeLine("  ")
    
    for name,param in zip(namesList,paramsList):
        writeLine("setParameter("+name+","+str(param)+");")
    writeLine("  ")
        
    writeLine("writeSBML();")
    writeLine("  ")
        
    fout.close()

        